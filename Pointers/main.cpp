#include <iostream>
#include <cstdlib>
#include <cmath>



void myswap(int num1, int num2) {
	int tmp = num1;
	num1 = num2;
	num2 = tmp;


}

void pswap(int* pointer1, int* pointer2) {
	int tmp = *pointer1;
	*pointer1 = *pointer2;
	*pointer2 = tmp;


}


void psum_arr(int arr[], const int lenght, int* var);


int main() {
	setlocale(LC_ALL, "Russian");
	// Задача 1 Сумма массива в указатель
	std::cout << "Задача1.\nМассив\n";
	int n, m;
	const int size1 = 5;
	int arr1[size1]{ 15, 5, 6, 7, 10 };
	for (int i = 0; i < size1; i++)
		std::cout << arr1[i] << ' ';
	std::cout << std::endl;
	
	int sum;
	psum_arr(arr1, size1, &sum);
	std::cout << "Сумма элементов = " << sum << std::endl;

	

	// Области применения указателей:
	// 1. Реализация массивов в программировании;
	// 2. Косвенный доступ к элементам за пределами их области видимости;
	// 3. Экономия памяти; Не копирует в функцию
	// 4. Работа с динамической памятью; Единственный способ для работы с динамическо памятью
	// 5. Реализация полиморфизма в ООП;
	// 6. Создание динамических структур данных.
	// Размер указателей в байтах не зависит от типа данных, на который они направлены. Он зависит от архитектуры системы, для который пишется приложение. 
	// Так, например, в ОС Windows с разрядностью x32 размер указателя - 4 байта, а с разрядностью x64 - 8 байт.

	
	
	// Указатели и функции.
	n = 7; m = 15;
	std::cout << n << ' ' << m << std::endl;
	//myswap(n, m); не работает, т.к. параметры - это копии передаваемых значений
	pswap(&n, &m);
	std::cout << n << ' ' << m << std::endl;
	







	// Указатели и массивы.
	const int size = 5;
	int arr[size]{ 30, 40, 50, 60, 70 };
	int* parr2 = &arr[2];
	std::cout << parr2 << std::endl;
	std::cout << *parr2 << std::endl;
	// Арифметика указателей - это процесс перемещения указателя на другие соседние участки памяти путём применения операций сложения и вычитания.
	// Формула изменения адреса:
	// pointer + a = pointer + a * type_size (Размер типа данных)
	// Ограничения арифметики указателей:
	// 1. Нельзя делить и умножать значения указателей;
	// 2. Арифметика указателей может работать только с целыми числами;
	// 3. Неельзя складывать значения указателей между собой, но можно вычитать из указателя другой указатель.
	// 4. По отношению к указателям можно применять операции сравнений (>, <. >=, <=, ==, !=).
	parr2+=2;
	
	std::cout << parr2 << std::endl;
	std::cout << *parr2 << std::endl;

	parr2 = &arr[0];
	for (int i = 0; i < size; i++)
		std::cout << *(parr2 + i) << ' ';
	std::cout << std::endl;
	
	
	// Указател на переменные

	n = 7;
	std::cout << "n = "  << n  << std::endl;
	std::cout << "&n = " << &n << std::endl; // Вывод адреса переменной n  с помощью операции &

	// Указатель - это переменная, созданная для хранения в себе адреса какой-либо области памяти. 
	// Например, указатель может хранить адрес созданной ранее в программе переменной.

	int* pn = &n; // Создание указателя на область памяти типа int и присваивание ему значения  в виде адреса n
	std::cout << "pn = " << pn << std::endl; // Вывод значения указателя ( шестнадцатеричной адрес переменной n )
	std::cout << "*pn = " << *pn << std::endl; // Вывод значения n через разыменование указателя

	// * - это разыменование - операция, применяемая исключительно к указателям или адресам памяти с целью обращения к тому участку памяти, на котороый они направлены.

	*pn = 15; // Измененрие значения n через разыменование указателя.
	std::cout << "n = " << n << std::endl;
	
	std::cout << "----------------------------------\n";
	
	m = 42;
	

	std::cout << "m= " << m << std::endl;
	std::cout << "&m = " << &m << std::endl;

	pn = &m;// "Перенаправление" указателя на переменную m
	
	std::cout << "pn = " << pn << std::endl;
	std::cout << "*pn = " << *pn << std::endl;

	int* pm = &m;
	std::cout << "pm = " << pm << std::endl;

	
	
	// Задача 1


	return 0;
}

void psum_arr(int arr[], const int lenght, int* var) {
	*var = 0;
	for (int i = 0; i < lenght; i++)
		*var += arr[i];
}